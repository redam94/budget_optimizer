"""Model classes"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/00_model_classes.ipynb.

# %% auto 0
__all__ = ['BaseModel']

# %% ../../nbs/utils/00_model_classes.ipynb 3
from abc import ABC, abstractmethod
from pathlib import Path
from collections.abc import Sequence
from typing import Callable, Generic, TypeVar, Union, Protocol
import xarray as xr

# %% ../../nbs/utils/00_model_classes.ipynb 4
class _Model(Protocol):
  @abstractmethod
  def predict(self, x: xr.Dataset) -> xr.Dataset:
    pass
  
  @abstractmethod
  def contributions(self, x: xr.Dataset) -> xr.Dataset:
    pass

# %% ../../nbs/utils/00_model_classes.ipynb 5
class BaseModel(ABC):
    """
    Abstract class for all models
    """
    @abstractmethod
    def __init__(
      self, 
      model_name: str, # Name used to identify the model
      model_kpi: str, # Key performance indicator output by the model predict
      model_path: str|Path, # Path to the model artifact
      model_loader: Callable[str|Path, _Model], # Function to load the model
      ):
        self.model_name: str = model_name
        self.model_kpi: str = model_kpi
        self.model_type: str = model_type
        self.model_path: Path = model_path if isinstance(model_path, Path) else Path(model_path)
        self._model = model_loader(model_path)

    @abstractmethod
    def predict(
        self, 
        x: xr.Dataset # Input data
        ) -> xr.Dataset: # Predicted target variable
        """
        Predict the target variable from the input data
        """
        pass
    
    @abstractmethod
    def contributions(
        self, 
        x: xr.Dataset # Input data
        ) -> xr.Dataset: # Contributions of the input data to the target variable
        """
        Get the contributions of the input data to the target variable
        """
        pass
